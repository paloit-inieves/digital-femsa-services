type AirTime {
  carrier: String
  earning: Float
  phoneNumber: String
  serviceName: String
}

type AuthenticationResponse {
  accessToken: String
  idUser: String
  message: String
  profiles: [ProfileEnum]
  refreshToken: String
  status: LoginStatus
}

type Branch {
  betweenStreet: String
  branchId: String
  branchName: String
  latitude: String
  longitude: String
  municipality: String
  postalCode: String
  street: String
}

type BranchResponse {
  data: [Branch]
}

type CategoryGql {
  description: String
  id: String
  imageUrl: String
  subCategories: [SubCategoryGql]
  title: String
}

type CategoryResponseGql {
  data: [CategoryGql]
}

enum Channel {
  KOF
  MPOS
}

type Clabe {
  clabe: String
  holder: String
  id: String
  status: String
}

type CommissionInfo {
  commissionPercentage: Float
  iva: Float
}

input ConfirmForgotPasswordInput {
  otpCode: String
  password: String
  username: String
}

type ConfirmForgotPasswordOutput {
  message: String
  status: ConfirmForgotPasswordStatusOutput
}

enum ConfirmForgotPasswordStatusOutput {
  FAILURE
  SUCCESS
}

enum ErrorDetail {
  """
  The deadline expired before the operation could complete.

  For operations that change the state of the system, this error
  may be returned even if the operation has completed successfully.
  For example, a successful response from a server could have been
  delayed long enough for the deadline to expire.

  HTTP Mapping: 504 Gateway Timeout
  Error Type: UNAVAILABLE
  """
  DEADLINE_EXCEEDED

  """
  The server detected that the client is exhibiting a behavior that
  might be generating excessive load.

  HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
  Error Type: UNAVAILABLE
  """
  ENHANCE_YOUR_CALM

  """
  The requested field is not found in the schema.

  This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
  query is valid, but is unable to return a result (if, for example, a
  specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
  returned by the server to signify that the requested field is not known to exist.
  This may be returned in lieu of failing the entire query.
  See also `PERMISSION_DENIED` for cases where the
  requested field is invalid only for the given user or class of users.

  HTTP Mapping: 404 Not Found
  Error Type: BAD_REQUEST
  """
  FIELD_NOT_FOUND

  """
  The client specified an invalid argument.

  Note that this differs from `FAILED_PRECONDITION`.
  `INVALID_ARGUMENT` indicates arguments that are problematic
  regardless of the state of the system (e.g., a malformed file name).

  HTTP Mapping: 400 Bad Request
  Error Type: BAD_REQUEST
  """
  INVALID_ARGUMENT

  """
  The provided cursor is not valid.

  The most common usage for this error is when a client is paginating
  through a list that uses stateful cursors. In that case, the provided
  cursor may be expired.

  HTTP Mapping: 404 Not Found
  Error Type: NOT_FOUND
  """
  INVALID_CURSOR

  """
  Unable to perform operation because a required resource is missing.

  Example: Client is attempting to refresh a list, but the specified
  list is expired. This requires an action by the client to get a new list.

  If the user is simply trying GET a resource that is not found,
  use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
  is to be used particularly when the user is performing an operation
  that requires a particular resource to exist.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  Error Type: FAILED_PRECONDITION
  """
  MISSING_RESOURCE

  """
  Service Error.

  There is a problem with an upstream service.

  This may be returned if a gateway receives an unknown error from a service
  or if a service is unreachable.
  If a request times out which waiting on a response from a service,
  `DEADLINE_EXCEEDED` may be returned instead.
  If a service returns a more specific error Type, the specific error Type may
  be returned instead.

  HTTP Mapping: 502 Bad Gateway
  Error Type: UNAVAILABLE
  """
  SERVICE_ERROR

  """
  Request failed due to network errors.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  TCP_FAILURE

  """
  Request throttled based on server concurrency limits.

  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  THROTTLED_CONCURRENCY

  """
  Request throttled based on server CPU limits

  HTTP Mapping: 503 Unavailable.
  Error Type: UNAVAILABLE
  """
  THROTTLED_CPU

  """
  The operation is not implemented or is not currently supported/enabled.

  HTTP Mapping: 501 Not Implemented
  Error Type: BAD_REQUEST
  """
  UNIMPLEMENTED

  """
  Unknown error.

  This error should only be returned when no other error detail applies.
  If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.

  HTTP Mapping: 500 Internal Server Error
  """
  UNKNOWN
}

enum ErrorType {
  """
  Bad Request.

  There is a problem with the request.
  Retrying the same request is not likely to succeed.
  An example would be a query or argument that cannot be deserialized.

  HTTP Mapping: 400 Bad Request
  """
  BAD_REQUEST

  """
  The operation was rejected because the system is not in a state
  required for the operation's execution.  For example, the directory
  to be deleted is non-empty, an rmdir operation is applied to
  a non-directory, etc.

  Service implementers can use the following guidelines to decide
  between `FAILED_PRECONDITION` and `UNAVAILABLE`:

  - Use `UNAVAILABLE` if the client can retry just the failing call.
  - Use `FAILED_PRECONDITION` if the client should not retry until
  the system state has been explicitly fixed.  E.g., if an "rmdir"
       fails because the directory is non-empty, `FAILED_PRECONDITION`
  should be returned since the client should not retry unless
  the files are deleted from the directory.

  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  """
  FAILED_PRECONDITION

  """
  Internal error.

  An unexpected internal error was encountered. This means that some
  invariants expected by the underlying system have been broken.
  This error code is reserved for serious errors.

  HTTP Mapping: 500 Internal Server Error
  """
  INTERNAL

  """
  The requested entity was not found.

  This could apply to a resource that has never existed (e.g. bad resource id),
  or a resource that no longer exists (e.g. cache expired.)

  Note to server developers: if a request is denied for an entire class
  of users, such as gradual feature rollout or undocumented allowlist,
  `NOT_FOUND` may be used. If a request is denied for some users within
  a class of users, such as user-based access control, `PERMISSION_DENIED`
  must be used.

  HTTP Mapping: 404 Not Found
  """
  NOT_FOUND

  """
  The caller does not have permission to execute the specified
  operation.

  `PERMISSION_DENIED` must not be used for rejections
  caused by exhausting some resource or quota.
  `PERMISSION_DENIED` must not be used if the caller
  cannot be identified (use `UNAUTHENTICATED`
  instead for those errors).

  This error Type does not imply the
  request is valid or the requested entity exists or satisfies
  other pre-conditions.

  HTTP Mapping: 403 Forbidden
  """
  PERMISSION_DENIED

  """
  The request does not have valid authentication credentials.

  This is intended to be returned only for routes that require
  authentication.

  HTTP Mapping: 401 Unauthorized
  """
  UNAUTHENTICATED

  """
  Currently Unavailable.

  The service is currently unavailable.  This is most likely a
  transient condition, which can be corrected by retrying with
  a backoff.

  HTTP Mapping: 503 Unavailable
  """
  UNAVAILABLE

  """
  Unknown error.

  For example, this error may be returned when
  an error code received from another address space belongs to
  an error space that is not known in this address space.  Also
  errors raised by APIs that do not return enough error information
  may be converted to this error.

  If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
  Unknown errors MUST NOT trigger any special behavior. These MAY be treated
  by an implementation as being equivalent to INTERNAL.

  When possible, a more specific error should be provided.

  HTTP Mapping: 520 Unknown Error
  """
  UNKNOWN
}

type FaqComment {
  comment: String
  dateCreation: String
  faqId: String
  id: String
  ipAddress: String
  reaction: Reaction
}

input FaqCommentInput {
  comment: String
  faqId: String!
  id: String
  ipAddress: String!
  reaction: Reaction!
}

type FaqCommentResponse {
  data: FaqComment
}

type FaqGql {
  answer: String
  id: String
  question: String
  relatedFaq: [RelateFaqGql]
  views: Int
}

input FinancialInfoRequest {
  idMerchant: String
}

type FinancialInfoResponse {
  clabes: [Clabe]
  message: String
  status: QueryStatus
}

input FindCommissionInfoRequest {
  idMerchant: String
}

type FindCommissionInfoResponse {
  commissionInfo: CommissionInfo
  message: String
  status: FindCommissionInfoStatus
}

enum FindCommissionInfoStatus {
  COMMISSION_INFO_FOUND
  COMMISSION_INFO_NOT_FOUND
}

input FindDeviceRequest {
  idDevice: String
}

type FindDeviceResponse {
  createdDate: String
  deviceStatus: String
  id: String
  initialExchangeFlag: Boolean
  lastExchangeDate: String
  lastExchangeStatus: String
  message: String
  modifiedDate: String
  pairingDate: String
  rebootExchangeFlag: Boolean
  status: FindDeviceResponseStatus
  type: Int
  version: String
}

enum FindDeviceResponseStatus {
  FIND_DEVICE_FAILURE
  FIND_DEVICE_NOT_FOUND
  FIND_DEVICE_SUCCESS
}

enum FindTransactionsSummaryOrder {
  ASC
  DESC
}

input FindTransactionsSummaryRequest {
  endDate: String
  idMerchant: String
  idUser: String
  pageSize: Int
  sort: FindTransactionsSummaryOrder
  startDate: String
  startPage: Int
}

type FindTransactionsSummaryResponse {
  currentPage: Int
  message: String
  nextPage: Int
  pageSize: Int
  status: FindTransactionsSummaryResponseStatus
  totalElements: Int
  totalGlobal: Float
  totalPages: Int
  transactionTotals: [TransactionTotal]
}

enum FindTransactionsSummaryResponseStatus {
  TRANSACTIONS_SUMMARY_FAILURE
  TRANSACTIONS_SUMMARY_SUCCESS
}

input FindVoucherRequest {
  idTransaction: String
  status: QueryVoucherTypeStatus
}

type FindVoucherResponse {
  idTransaction: String
  idUser: String
  message: String
  status: QueryStatusFindVoucher
  statusVoucher: String
}

input ForgotPasswordChangePasswordRequest {
  hash: String
  password: String
  userId: String
}

type ForgotPasswordChangePasswordResponse {
  message: String
  status: QueryStatusForgotPasswordChangePassword
}

input ForgotPasswordInput {
  username: String
}

type ForgotPasswordOutput {
  message: String
  status: ForgotPasswordStatusOutput
}

input ForgotPasswordRequest {
  id: String
}

type ForgotPasswordResponse {
  message: String
  status: QueryStatusForgotPassword
  userId: String
}

enum ForgotPasswordStatusOutput {
  FAILURE
  SUCCESS
}

input ForgotPasswordValidateOtpRequest {
  otp: String
  userId: String
}

type ForgotPasswordValidateOtpResponse {
  hash: String
  message: String
  status: QueryStatusForgotPasswordValidateOtp
}

type GeneralResponse {
  message: String
  status: String
}

input GetBankAccountRequest {
  idClabe: String
}

type GetBankAccountResponse {
  clabe: Clabe
  message: String
  status: QueryStatus
}

input GetBusinessRequest {
  idBranch: String
}

type GetBusinessResponse {
  merchant: Merchant
  message: String
  status: QueryStatus
}

input GetDataPostalCodeRequest {
  postalCode: String
}

type GetDataPostalCodeResponse {
  city: String
  country: String
  countryCode: String
  message: String
  state: String
  stateCode: String
  status: GetDataPostalCodeStatus
}

enum GetDataPostalCodeStatus {
  FAILURE
  SUCCESS
}

input GetSaleVoucherRequest {
  idTransaction: String
}

type GetSaleVoucherResponse {
  affiliation: String
  aid: String
  airTime: AirTime
  amount: Float
  apiFolio: String
  arqc: String
  authorizationMethod: String
  authorizationNumber: String
  bin: String
  cardFranchise: String
  cardHolderName: String
  cardIssuingBank: String
  description: String
  lastPanDigits: String
  merchantName: String
  message: String
  natureCard: String
  pem: String
  pinpadSeries: String
  returnDays: Int
  servicePayment: ServicePayment
  status: QueryStatusGetSaleVoucher
  transactionDate: String
  transactionStatus: String
  transactionTime: String
  transactionType: String
}

input GetUserRequest {
  idUser: String
  phoneNumber: ValidateUserRequest
}

type GetUserResponse {
  message: String
  status: QueryStatus
  user: UserDto
}

input InputHash {
  value: String
}

type KeyExchangeOptions {
  immediateExchange: Boolean
  rebootExchange: Boolean
}

input KeyExchangeRequest {
  checkValue: String
  crc32RandomKey: String
  idMerchant: String
  merchantIdMpos: String
  randomKey: String
  rsaPublicKeyVersion: String
  serialNumber: String
  softwareVersion: String
}

type KeyExchangeResponse {
  checkValue: String
  ksn: String
  message: String
  serverKey: String
  status: String
}

"""### INPUT ####"""
input LoginInput {
  password: String
  username: String
}

"""### OUTPUT ####"""
type LoginOutput {
  accessToken: String
  message: String
  publicKey: String
  refreshToken: String
  status: LoginStatusOutput
  userId: String
}

input LoginRequest {
  password: String
  userName: String
}

type LoginResponse {
  accessToken: String
  changePassword: Boolean
  idUser: String
  message: String
  profiles: [ProfileEnum]
  refreshToken: String
  status: LoginStatus
}

input LoginSDKRequest {
  apiKey: String
  secretKey: String
  username: String
}

type LoginSDKResponse {
  authenticationResponse: AuthenticationResponse
  serviceResponse: ServiceResponse
}

enum LoginStatus {
  AUTHORIZED
  NOT_AUTHORIZED
}

"""## ENUM ###"""
enum LoginStatusOutput {
  AUTHORIZED
  NOT_AUTHORIZED
}

input LogoutRequest {
  refreshToken: String
}

type LogoutResponse {
  message: String
  status: LogoutStatus
}

enum LogoutStatus {
  FAILURE
  SUCCESS
}

type Merchant {
  businessActivity: String
  businessName: String
  createdDate: String
  id: String
  modifiedDate: String
  status: String
  zipCode: String
}

type Mutation {
  refreshJWT(refreshTokenInput: RefreshTokenInput): RefreshTokenOutput
  keyExchange(request: KeyExchangeRequest): KeyExchangeResponse
  paymentCancelRefund(request: PaymentCancelRefundRequest): PaymentCancelRefundResponse
  paymentWithChip(request: WithChipRequest): WithChipResponse
  reverseWithChip(request: WithChipReverseRequest): WithChipReverseResponse
  saveBusinessInfo(request: SaveBusinessInfoRequest): SaveBusinessInfoResponse
  saveDevice(request: SaveDeviceRequest): SaveDeviceResponse
  saveMethodClabe(request: SaveMethodClabeRequest): SaveMethodClabeResponse
  updateBankAccountInfo(request: UpdateBankAccountInfoRequest): GeneralResponse
  updateBusinessInfo(request: UpdateBusinessInfoRequest): GeneralResponse
  updateDeviceInfo(request: UpdateDeviceInfoRequest): GeneralResponse
  updatePairingInfo(request: PairingInfoRequest): PairingInfoResponse
  addFaqComment(comment: FaqCommentInput!): FaqCommentResponse
  updateViewsInSectionAndFaqByFaqId(id: String!): SubCategoryResponseGql
  forgotPassword(request: ForgotPasswordRequest): ForgotPasswordResponse
  forgotPasswordChangePassword(request: ForgotPasswordChangePasswordRequest): ForgotPasswordChangePasswordResponse
  forgotPasswordValidateOtp(request: ForgotPasswordValidateOtpRequest): ForgotPasswordValidateOtpResponse
  resendOtp(request: ResendOtpRequest): GeneralResponse
  savePassword(request: SavePasswordRequest): SavePasswordResponse
  saveUserInfo(request: SaveUserInfoRequest): GeneralResponse
  sendOtp(request: OtpSendRequest): OtpSendResponse
  updateUserInfo(request: SaveUserInfoRequest): GeneralResponse
  validateOtp(request: OtpValidateRequest): OtpValidateResponse
  retrySaveVoucher(request: RetrySaveVoucherRequest): RetrySaveVoucherResponse
  saveVoucher(request: SaveVoucherRequest): SaveVoucherResponse
  sendVoucher(request: SendVoucherRequest): SendVoucherResponse
  walletBuyAirTime(request: WalletAirTimeRequest): WalletAirTimeResponse
}

enum OriginChannel {
  KOF
  STANDAR
}

input OtpSendRequest {
  countryCode: String
  mobileNumber: String
}

type OtpSendResponse {
  hash: OutputHash
  idUser: String
  message: String
  status: String
}

input OtpValidateRequest {
  hash: InputHash
  idUser: String
  otp: String
}

type OtpValidateResponse {
  message: String
  status: String
  valid: Boolean
}

type OutputHash {
  value: String
}

input PairingInfoRequest {
  idBranch: String
  idUser: String
  serialNumber: String
}

type PairingInfoResponse {
  idDevice: String
  message: String
  status: String
}

type Parameter {
  createdDate: String
  description: String
  modifiedDate: String
  name: String
  value: String
}

type ParametersResponse {
  message: String
  parameters: [Parameter]
  status: QueryStatus
}

input PaymentCancelRefundRequest {
  amount: String
  bin: String
  cryptogram: String
  idMerchant: String
  idTransaction: String
  idUser: String
  ksn: String
  lastPanDigits: String
  serialNumber: String
  softwareVersion: String
  track2Data: String
  transactionDate: String
}

type PaymentCancelRefundResponse {
  affiliation: String
  amount: String
  apiFolio: String
  authorizationNumber: String
  exchange: KeyExchangeOptions
  idTransaction: String
  message: String
  responseCryptogram: String
  status: PaymentCancelRefundResponseStatus
  transactionDate: String
}

enum PaymentCancelRefundResponseStatus {
  CANCEL_REFUND_FAILURE
  CANCEL_REFUND_FAILURE_DIFFERENT_CARD
  CANCEL_REFUND_FAILURE_NO_BALANCE
  CANCEL_REFUND_SUCCESS
}

enum PaymentStatus {
  PAYMENT_FAILURE
  PAYMENT_FAILURE_REVERSE
  PAYMENT_FAILURE_REVERSE_FAILURE
  PAYMENT_FAILURE_UPDATE_FLAGS
  PAYMENT_SUCCESS
  PAYMENT_SUCCESS_UPDATE_FLAGS
}

enum ProfileEnum {
  KOF_USER
  MERCHANT_USER
}

input ProfileInput {
  channel: Channel = MPOS
  concept: String
  offeringCharge: Float
  orderNumber: String
  originChannel: OriginChannel = STANDAR
}

type Query {
  findBankAccountInfo(request: GetBankAccountRequest): GetBankAccountResponse
  findBusinessInfo(request: GetBusinessRequest): GetBusinessResponse
  findCommissionInfo(request: FindCommissionInfoRequest): FindCommissionInfoResponse
  findDevice(request: FindDeviceRequest): FindDeviceResponse
  findFinancialInfo(request: FinancialInfoRequest): FinancialInfoResponse
  findParameters: ParametersResponse
  findTransactionsInfo(request: TransactionQueriesRequest): TransactionQueriesResponse
  findTransactionsSummary(request: FindTransactionsSummaryRequest): FindTransactionsSummaryResponse
  findUserAccountInfo(request: UserAccountRequest): UserAccountResponse
  categories: CategoryResponseGql
  categoryAndSubCategoryByFaqId(id: String!): CategoryGql
  categoryById(id: String!): CategoryGql
  getBranches: BranchResponse
  searchByKeyword(keyword: String!): CategoryResponseGql
  subCategoryById(id: String!): SubCategoryGql
  topThreeFaqBySubCategoryId(id: String!): CategoryGql
  topThreeSubCategoryByCategoryId(id: String!): CategoryGql
  findUserInfo(request: GetUserRequest): GetUserResponse
  getDataPostalCode(request: GetDataPostalCodeRequest): GetDataPostalCodeResponse
  login(request: LoginRequest): LoginResponse
  loginSDK(request: LoginSDKRequest): LoginSDKResponse
  logout(request: LogoutRequest): LogoutResponse
  validateEmail(request: ValidateEmailRequest): ValidateEmailResponse
  validatePassword(request: ValidatePasswordRequest): LoginResponse
  validateUser(request: ValidateUserRequest): ValidateUserResponse
  findVoucher(request: FindVoucherRequest): FindVoucherResponse
  getSaleVoucher(request: GetSaleVoucherRequest): GetSaleVoucherResponse
  walletBalanceCurrent(request: WalletBalanceCurrentRequest): WalletBalanceCurrentResponse
  walletCalculateEarning(request: WalletCalculateEarningRequest): WalletCalculateEarningResponse
  walletFindFeatures(request: WalletFeaturesRequest): WalletFeaturesResponse
  walletFindPayments(request: WalletPaymentsRequest): WalletPaymentsResponse
  walletGetCategories(request: WalletGetCategoriesRequest): WalletGetCategoriesResponse
  walletGetCategory(request: WalletGetCategoryRequest): WalletGetCategoryResponse
  walletGetOneOperator(request: WalletGetOneOperatorRequest): WalletSingleOperatorResponse
  walletGetOperators(request: WalletGetOperatorsRequest): WalletGetOperatorsResponse
  walletGetProvider(request: WalletGetProviderRequest): WalletGetProviderResponse
  walletGetProviders(request: WalletGetProvidersRequest): WalletGetProvidersResponse
  walletMovements(request: WalletMovementsRequest): WalletMovementsResponse
}

enum QueryStatus {
  FAILURE
  SUCCESS_FOUND
  SUCCESS_NOT_FOUND
}

enum QueryStatusFindVoucher {
  VOUCHER_FOUND
  VOUCHER_FOUND_FAIL
}

enum QueryStatusForgotPassword {
  OTP_SENT
  OTP_SENT_FAIL
}

enum QueryStatusForgotPasswordChangePassword {
  PASSWORD_SAVED
  PASSWORD_SAVED_FAIL
}

enum QueryStatusForgotPasswordValidateOtp {
  OTP_VALIDATED
  OTP_VALIDATED_FAIL
}

enum QueryStatusGetSaleVoucher {
  VOUCHER_ERROR
  VOUCHER_FOUND
  VOUCHER_NOT_FOUND
}

enum QueryStatusRetrySaveVoucher {
  VOUCHER_SAVED
  VOUCHER_SAVED_FAIL
}

enum QueryStatusSaveVoucher {
  VOUCHER_SAVED
  VOUCHER_SAVED_FAIL
}

enum QueryStatusSendVoucher {
  VOUCHER_SEND
  VOUCHER_SEND_FAIL
}

enum QueryVoucherTypeStatus {
  CANCELLATION_VOUCHER
  PAYMENT_VOUCHER
}

enum Reaction {
  HAPPY
  SAD
}

input RefreshTokenInput {
  refreshToken: String
}

type RefreshTokenOutput {
  accessToken: String
  message: String
  status: RefreshTokenStatusOutput
}

enum RefreshTokenStatusOutput {
  AUTHORIZED
  NOT_AUTHORIZED
}

type RelateFaqGql {
  faq: FaqGql
}

input ResendOtpRequest {
  hash: InputHash
  idUser: String
}

enum ResendOtpStatusOutput {
  FAILURE
  SUCCESS
}

input RetrySaveVoucherRequest {
  idTransaction: String
  status: QueryVoucherTypeStatus
}

type RetrySaveVoucherResponse {
  message: String
  status: QueryStatusRetrySaveVoucher
}

input SaveBusinessInfoRequest {
  businessActivity: String
  businessName: String
  idBranch: String
  idCountry: Int
  idUser: String
  zipCode: String
}

type SaveBusinessInfoResponse {
  idBranch: String
  idMerchant: String
  message: String
  responseCode: String
  status: String
}

input SaveDeviceRequest {
  idBranch: String
  idUser: String
  serialNumber: String
  type: Int
  version: String
}

type SaveDeviceResponse {
  idDevice: String
  message: String
  status: String
}

input SaveMethodClabeRequest {
  clabe: String
  holder: String
  idBranch: String
}

type SaveMethodClabeResponse {
  idClabe: String
  idFinancialData: String
  message: String
  status: String
}

input SavePasswordRequest {
  hash: InputHash
  idUser: String
  password: String
}

type SavePasswordResponse {
  login: LoginResponse
  message: String
  status: String
}

input SaveUserInfoRequest {
  email: String
  idUser: String
  lastName: String
  name: String
}

input SaveVoucherRequest {
  idTransaction: String
  idUser: String
  lastPanDigits: String
  status: QueryVoucherTypeStatus
}

type SaveVoucherResponse {
  message: String
  status: QueryStatusSaveVoucher
}

input SendVoucherRequest {
  idTransaction: String
  status: QueryVoucherTypeStatus
  subject: String
  type: String
}

type SendVoucherResponse {
  message: String
  status: QueryStatusSendVoucher
}

enum ServiceNameEarning {
  AIR_TIME
  SERVICE_PAYMENT
}

type ServicePayment {
  commission: Float
  earning: Float
  serviceName: String
}

type ServiceResponse {
  message: String
  status: ServiceStatus
}

enum ServiceStatus {
  FAILURE
  SUCCESS
}

type SubCategoryGql {
  faq: [FaqGql]
  id: String
  imageUrl: String
  subCategory: String
  views: Int
}

type SubCategoryListResponseGql {
  data: [SubCategoryGql]
}

type SubCategoryResponseGql {
  data: SubCategoryGql
}

enum TransactionOrder {
  ASC
  DESC
}

input TransactionQueriesRequest {
  pageSize: Int!
  startPage: Int!
  transactionQueryRequest: TransactionQueryRequest
}

type TransactionQueriesResponse {
  hasNext: Boolean
  hasPrevious: Boolean
  message: String
  nextPage: Int
  previousPage: Int
  status: QueryStatus
  totalElements: Int
  totalPages: Int
  transactionQueryResponse: [TransactionQueryResponse]
}

input TransactionQueryRequest {
  idMerchant: String!
  idTransaction: String
  idUser: String
  sort: TransactionOrder = DESC
  status: TransactionStatus
  transactionDateFin: String!
  transactionDateIni: String!
}

type TransactionQueryResponse {
  amount: Float
  commission: Float
  description: String
  earnings: Float
  idTransaction: String
  paymentTypeDescription: String
  status: TransactionStatus
  transactionDate: String
  urlImage: String
}

enum TransactionStatus {
  TRANSACTION_CANCELED
  TRANSACTION_CANCELED_REFUND
  TRANSACTION_FAILURE
  TRANSACTION_REFUND
  TRANSACTION_SUCCESS
}

type TransactionTotal {
  amount: Float
  buyAirTime: Float
  cardPayment: Float
  paymentService: Float
  transactionDate: String
}

input UpdateBankAccountInfoRequest {
  clabe: String
  holder: String
  idClabe: String
}

input UpdateBusinessInfoRequest {
  businessActivity: String
  businessName: String
  idBranch: String
  zipCode: String
}

input UpdateDeviceInfoRequest {
  idDevice: String
  rebootExchangeFlag: Boolean
}

enum UpdateStatus {
  FAILURE_UPDATE
  SUCCESS_UPDATE
}

type User {
  id: String
  name: String
}

type UserAccount {
  holder: String
  idBranch: String
  idClabe: String
  idFinancialData: String
  idMerchant: String
  nameMerchant: String
}

input UserAccountRequest {
  idUser: String
}

type UserAccountResponse {
  message: String
  status: QueryStatus
  userAccount: [UserAccount]
}

type UserDto {
  countryCode: String
  email: String
  id: String
  lastName: String
  mobileNumber: String
  name: String
  status: String
}

input ValidateEmailRequest {
  email: String
  idUser: String
}

type ValidateEmailResponse {
  message: String
  status: ValidateEmailStatus
}

enum ValidateEmailStatus {
  INVALID
  VALID
}

input ValidatePasswordRequest {
  idUser: String
  password: String
}

input ValidateUserRequest {
  countryCode: String
  mobileNumber: String
}

type ValidateUserResponse {
  message: String
  status: ValidateUserStatus
}

enum ValidateUserStatus {
  INVALID
  VALID
}

input WalletAddRequest {
  amount: String
  description: String
  idWallet: String
  reference: String
}

type WalletAddResponse {
  balance: String
  message: String
  status: WalletTransactionStatus
}

type WalletAirTimeAppPerk {
  label: String!
  services: [String!]!
}

type WalletAirTimeItem {
  amount: Int!
  carrierCode: String!
  description: String!
  id: String!
  name: String!
  perks: [WalletAirTimePerk!]!
  sku: String!
  title: String!
  type: String!
}

type WalletAirTimeOperator {
  carrier: String!
  company: String!
  digitalId: String!
  hasPackages: Boolean!
  id: String!
  image: String!
  item: WalletAirTimeItem
  legend: String!
  name: String!
  paymentMethods: [WalletAirTimePaymentMethod]
  sections: [WalletAirTimeSection]
  type: String!
}

type WalletAirTimePaymentMethod {
  id: String
  method: String
}

type WalletAirTimePerk {
  appPerks: [WalletAirTimeAppPerk!]!
  expired: String!
  itemId: String!
  legend: String!
  megas: String!
  sku: String!
}

input WalletAirTimeRequest {
  amount: Float
  channel: WalletChannelService!
  extraInfo: WalletExtraInfoBuyAirTime!
  idMerchant: String!
  itemId: String!
  location: WalletLocationService!
  methodId: String!
  operatorId: String!
  paymentMethod: WalletPaymentMethodUse!
  pem: String!
  phoneNumber: String!
  postalCode: String!
  provider: String!
  tokenC4: WalletTokenC4Service!
  tokenEs: WalletTokenEsService!
  tokenEw: WalletTokenEwService!
  tokenEy: WalletTokenEyService!
  tokenEz: WalletTokenEzService!
  tokenQ1: WalletTokenQ1Service!
  tokenQ2: WalletTokenQ2Service!
}

type WalletAirTimeResponse {
  affiliation: String!
  amountService: Int!
  authorizationNumber: String!
  cardCryptogram: String!
  folioNumber: String!
  operator: WalletOperatorAirTime!
  paymentMethod: WalletPaymentMethodUsed!
  responseError: WalletResponseError
  tokenC4: WalletTokenC4OutPut!
  tokenEr: WalletTokenErOutPut!
  tokenEx: String!
  tokenQ2: WalletTokenQ2OutPut!
  transactionDate: String!
  transactionId: String!
  transactionStatus: WalletTransactionStatus!
}

type WalletAirTimeSection {
  image: String!
  items: [WalletAirTimeItem]
  name: String!
  title: String!
  type: String!
}

input WalletBalanceCurrentRequest {
  idUser: String
  idWallet: String
}

type WalletBalanceCurrentResponse {
  balance: String
  idWallet: String
}

input WalletCalculateEarningRequest {
  amount: String!
  keyParameterizable: String!
  serviceName: ServiceNameEarning
}

type WalletCalculateEarningResponse {
  amountCalculated: String
  responseError: WalletResponseError
  transactionStatus: WalletTransactionStatus
}

type WalletCategory {
  children: [WalletProvider]
  id: String
  image: String
  name: String
  order: String
  root: String
  status: String
}

input WalletChannelService {
  description: String!
  originChannel: Int!
}

type WalletCommission {
  description: String
  id: String
}

input WalletCreateRequest {
  clabe: String
  idUser: String
}

type WalletCreateResponse {
  balance: String
  idWallet: String
  message: String
  status: WalletTransactionStatus
}

input WalletExtraInfoBuyAirTime {
  aid: String!
  arqc: String!
  authorizationMethod: String!
  bin: String!
  cardCryptogram: String!
  cardHolderName: String!
  cardTrack2: String
  currencyCode: String!
  description: String!
  offerorCharge: Float!
  orderNumber: String!
  posIdentification: String!
  signLocation: String!
  userId: String!
}

type WalletFeature {
  bucket: String
  commission: WalletCommission
  description: String
  icon: [String]
  id: String
  name: String
  status: String
  uri: String
}

input WalletFeaturesRequest {
  idUser: String
}

type WalletFeaturesResponse {
  features: [WalletFeature]
  message: String
  status: WalletQueryStatus!
}

enum WalletFeatureStatus {
  ACTIVE
  INACTIVE
}

input WalletGetCategoriesRequest {
  limit: Int
  page: Int
}

type WalletGetCategoriesResponse {
  categories: [WalletCategory]
  metadata: WalletMetadata
  responseError: WalletResponseError
  status: WalletQueryStatus!
}

input WalletGetCategoryRequest {
  categoryId: String!
}

type WalletGetCategoryResponse {
  category: WalletCategory
  responseError: WalletResponseError
  status: WalletQueryStatus!
}

input WalletGetOneOperatorRequest {
  operatorId: String!
}

input WalletGetOperatorsRequest {
  limit: Int!
  page: Int!
  provider: String
}

type WalletGetOperatorsResponse {
  metadata: WalletMetadata
  operators: [WalletAirTimeOperator]
  status: WalletQueryStatus!
}

input WalletGetProviderRequest {
  providerId: String!
}

type WalletGetProviderResponse {
  provider: WalletProvider
  responseError: WalletResponseError
  status: WalletQueryStatus!
}

input WalletGetProvidersRequest {
  category: String
  limit: Int!
  page: Int!
  providerName: String
}

type WalletGetProvidersResponse {
  metadata: WalletMetadata
  providers: [WalletProvider]
  responseError: WalletResponseError
  status: WalletQueryStatus!
}

type WalletInputs {
  alphanumeric: Boolean
  confirmation: Boolean
  editable: Boolean
  field: String
  fieldMessage: String
  helpImage: String
  referenceType: String
}

type WalletItemAirTime {
  amount: Int!
  carrierCode: String!
  description: String!
  name: String!
  title: String!
  type: String!
}

input WalletLocationService {
  latitude: Float!
  longitude: Float!
}

type WalletMetadata {
  page: Int!
  perPage: Int!
  total: Int!
  totalPages: Int!
}

type WalletMovement {
  date: String!
  description: String
  id: String
  picture: String
  type: String
  value: String
}

input WalletMovementsRequest {
  idUser: String
  idWallet: String
}

type WalletMovementsResponse {
  balance: String
  message: String
  movements: [WalletMovement]
  status: WalletTransactionStatus
}

type WalletOperatorAirTime {
  company: String
  image: String!
  item: WalletItemAirTime
  legend: String!
  name: String!
}

input WalletPaymentMethodUse {
  paymentId: String!
  paymentValue: String!
}

type WalletPaymentMethodUsed {
  paymentId: String!
  paymentValue: String!
}

input WalletPaymentsRequest {
  idUser: String
}

type WalletPaymentsResponse {
  Payments: [WalletPaymentWay]
  message: String
  status: WalletQueryStatus!
}

enum WalletPaymentType {
  CARD_PATH
  CASH_PATH
}

type WalletPaymentWay {
  bucket: String
  icon: [String]
  id: String
  name: String
  status: String
  type: WalletPaymentType
}

type WalletProvider {
  categories: [WalletCategory]
  company: String
  expiredAllow: Boolean
  id: String
  image: String
  inputs: [WalletInputs]
  item: WalletAirTimeItem
  legends: String
  name: String
  operation: String
  prepaid: Boolean
  scannable: Boolean
  supportInfo: String
  type: String
}

enum WalletQueryStatus {
  FAILURE
  SUCCESS_FOUND
  SUCCESS_NOT_FOUND
}

type WalletResponseError {
  errorCode: Int
  message: String
}

type WalletSingleOperatorResponse {
  operator: WalletAirTimeOperator!
  status: WalletQueryStatus!
}

type WalletTokenC4OutPut {
  acquirerSecurityLevel: Int!
  activationTerminalCardHolder: Int!
  capacityIndicatorTransferDataCardTerminal: Int!
  cardCaptureCapacityIndicator: Int!
  cardHolderIdentificationMethod: Int!
  cardHolderPresenceIndicator: Int!
  cardPresenceIndicator: Int!
  routingIndicator: Int!
  statusIndicator: Int!
  terminalLocation: Int!
  terminalServicedAcquirer: Int!
}

input WalletTokenC4Service {
  acquirerSecurityLevel: Int!
  activationTerminalCardHolder: Int!
  capacityIndicatorTransferDataCardTerminal: Int!
  cardCaptureCapacityIndicator: Int!
  cardHolderIdentificationMethod: Int!
  cardHolderPresenceIndicator: Int!
  cardPresenceIndicator: Int!
  routingIndicator: Int!
  statusIndicator: Int!
  terminalLocation: Int!
  terminalServicedAcquirer: Int!
}

type WalletTokenErOutPut {
  binesUpdateFlag: String!
  updateFlagKeys: String!
}

input WalletTokenErService {
  binesUpdateFlag: String!
  updateFlagKeys: String!
}

input WalletTokenEsService {
  encryptionSettings: String!
  idTableLocalBinesInformedTerminal: String!
  idTableLocalBinesLoadedPinPad: String!
  localBinesTableVersionLoadedPinPad: String!
  newKeyRequestFlag: String!
  pinPadSeries: String!
  softwareVersionMpos: String!
}

input WalletTokenEwService {
  checkValue: Int!
  encryptedKeyCrc32: String!
  encryptedRandomKey: String!
  paddingAlgorithm: String!
  rsaPublicKeyVersion: String!
}

input WalletTokenEyService {
  encryptedTrack1Data: String!
  track1Crc32Encryption: String!
  track1Length: String!
}

input WalletTokenEzService {
  cardReadingMode: String!
  cipherSensitiveData: String!
  crc32: String!
  digitsPan: String!
  failedCipherCounter: String!
  flagCvv2: String!
  flagTrack1: Int!
  flagTrack2: Int!
  keySerialNumber: String!
  lengthCvv2: String!
  lengthTrack2: String!
  realCipherCounter: String!
}

input WalletTokenQ1Service {
  authorizationMode: String!
}

type WalletTokenQ2OutPut {
  accessMode: String!
}

input WalletTokenQ2Service {
  accessMode: String!
}

enum WalletTransactionStatus {
  TRANSACTION_FAILURE
  TRANSACTION_SUCCESS
}

input WithChipRequest {
  amount: String
  bin: String
  concept: String
  cryptogram: String
  idMerchant: String
  idUser: String
  ksn: String
  lastPanDigits: String
  merchantIdMpos: String
  profileInput: ProfileInput
  serialNumber: String
  softwareVersion: String
  track2Crc32: String
  track2Data: String
}

type WithChipResponse {
  apiFolio: String
  authorizationNumber: String
  exchange: KeyExchangeOptions
  message: String
  responseCryptogram: String
  status: PaymentStatus
  transactionDate: String
  transactionId: String
}

input WithChipReverseRequest {
  request: WithChipRequest
  reverseType: String
  transactionId: String
}

type WithChipReverseResponse {
  message: String
  status: PaymentStatus
}